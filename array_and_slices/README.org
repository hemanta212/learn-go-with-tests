* Slices behavior
** Procedural simple code within one scope
#+begin_src go :exports both :results output :imports fmt
  // Declare an array of size 4
  arr := [5]int{1,2,3,4,5}
  fmt.Printf("Arr: %v\n", arr)

  // Create a slice view to see middle 2 items
  slice := arr[1:3]
  fmt.Printf("Slice: %v -> Len: %d Cap: %d\n", slice, len(slice), cap(slice))

  // Print index out of len but within the capacity
  // fmt.Println(slice[2]) // Produces index error

  // Set index out of len but within the capacity
  // slice[2] = 8 // Produces error still

  // Having a capacity means you can increase it with reassignment with slicing
  slice = slice[:3]
  fmt.Printf("Slice w. cap increase: %v\n", slice)

  // Increasing the cap with append: uses current arr and increase cap if available
  slice = append(slice, 10)
  fmt.Printf("After Append: Arr: %v Slice: %v\n", arr, slice)

  // Using append, after the cap is full: a new array gets created and slice points to that
  slice = append(slice, 0)
  fmt.Printf("Append Cap full: Arr: %v Slice: %v\n", arr, slice)

  // Now slice is disconnected so to speak with original array, changes aren't reflected
  slice[0] = 100
  fmt.Printf("Disconnection: Arr: %v Slice: %v\n", arr, slice)
#+end_src

#+RESULTS:
: Arr: [1 2 3 4 5]
: Slice: [2 3] -> Len: 2 Cap: 4
: Slice w. cap increase: [2 3 4]
: After Append: Arr: [1 2 3 4 10] Slice: [2 3 4 10]
: Append Cap full: Arr: [1 2 3 4 10] Slice: [2 3 4 10 0]
: Disconnection: Arr: [1 2 3 4 10] Slice: [100 3 4 10 0]

** Arrs and slices behavior in inter-function calls
#+begin_src go :exports both :results output :main no
  import "fmt"
  func main(){
      arr := [5]int{1,2,3,4,5}
      slice := arr[1:3]
      fmt.Printf("Init(Main): Arr: %v Slice: %v\n", arr, slice)

      // slice doesnot notice change in itself but reflects array change (cause its a view)
      // hypothesis, slice gets copied in func call, we have 2 views on same array
      fmt.Printf("---1--\n")
      test(slice, 1)
      fmt.Printf("Connection(Main): Arr: %v Slice: %v\n", arr, slice)

      // increasing and modifying the slice using append still produces same result
      fmt.Printf("---2--\n")
      test(slice, 2)
      fmt.Printf("Connection(Main): Arr: %v Slice: %v\n", arr, slice)

      // Now disconnection test after cap full using append
      fmt.Printf("---3--\n")
      newSlice := test(slice, 3)
      fmt.Printf("Connection(Main): Arr: %v Slice: %v\n", arr, slice)

      // finally get the new slice here
      // Hypotheis 2: passing the slice ref/pointer to func call would have produced slice=newSlice
      fmt.Printf("------\n")
      fmt.Printf("Final(Main): Arr: %v NewSlice: %v\n", arr, newSlice)
  }

  func test(slice []int, testNo int) ([]int){
      // confirm the cap and len of given slice
      fmt.Printf("SliceInfo(test): %v -> Len: %d Cap: %d\n", slice, len(slice), cap(slice))
      // connection exists between the slices and arr
      slice[1] = 300
      slice = slice[:3]
      fmt.Printf("Mod+Cap++(test): %v -> Len: %d Cap: %d\n", slice, len(slice), cap(slice))
      // end of test 1
      if testNo == 1 {return slice}

      // testing with append to increase the slice len
      slice = append(slice, 100)
      fmt.Printf("Mod+Append(test): %v -> Len: %d Cap: %d\n", slice, len(slice), cap(slice))
      if testNo == 2 {return slice}

      slice = append(slice, 0)
      fmt.Printf("Append beyond cap(test): %v -> Len: %d Cap: %d\n", slice, len(slice), cap(slice))
      return slice
  }
#+end_src

#+RESULTS:
#+begin_example
Init(Main): Arr: [1 2 3 4 5] Slice: [2 3]
---1--
SliceInfo(test): [2 3] -> Len: 2 Cap: 4
Mod+Cap++(test): [2 300 4] -> Len: 3 Cap: 4
Connection(Main): Arr: [1 2 300 4 5] Slice: [2 300]
---2--
SliceInfo(test): [2 300] -> Len: 2 Cap: 4
Mod+Cap++(test): [2 300 4] -> Len: 3 Cap: 4
Mod+Append(test): [2 300 4 100] -> Len: 4 Cap: 4
Connection(Main): Arr: [1 2 300 4 100] Slice: [2 300]
---3--
SliceInfo(test): [2 300] -> Len: 2 Cap: 4
Mod+Cap++(test): [2 300 4] -> Len: 3 Cap: 4
Mod+Append(test): [2 300 4 100] -> Len: 4 Cap: 4
Append beyond cap(test): [2 300 4 100 0] -> Len: 5 Cap: 8
Connection(Main): Arr: [1 2 300 4 100] Slice: [2 300]
------
Final(Main): Arr: [1 2 300 4 100] NewSlice: [2 300 4 100 0]
#+end_example
